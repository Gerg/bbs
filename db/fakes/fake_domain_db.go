// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bbs/db"
	"github.com/cloudfoundry-incubator/bbs/models"
	"github.com/pivotal-golang/lager"
)

type FakeDomainDB struct {
	GetAllDomainsStub        func(logger lager.Logger) (*models.Domains, *models.Error)
	getAllDomainsMutex       sync.RWMutex
	getAllDomainsArgsForCall []struct {
		logger lager.Logger
	}
	getAllDomainsReturns struct {
		result1 *models.Domains
		result2 *models.Error
	}
	UpsertDomainStub        func(domain string, ttl int, lgger lager.Logger) *models.Error
	upsertDomainMutex       sync.RWMutex
	upsertDomainArgsForCall []struct {
		domain string
		ttl    int
		lgger  lager.Logger
	}
	upsertDomainReturns struct {
		result1 *models.Error
	}
}

func (fake *FakeDomainDB) GetAllDomains(logger lager.Logger) (*models.Domains, *models.Error) {
	fake.getAllDomainsMutex.Lock()
	fake.getAllDomainsArgsForCall = append(fake.getAllDomainsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.getAllDomainsMutex.Unlock()
	if fake.GetAllDomainsStub != nil {
		return fake.GetAllDomainsStub(logger)
	} else {
		return fake.getAllDomainsReturns.result1, fake.getAllDomainsReturns.result2
	}
}

func (fake *FakeDomainDB) GetAllDomainsCallCount() int {
	fake.getAllDomainsMutex.RLock()
	defer fake.getAllDomainsMutex.RUnlock()
	return len(fake.getAllDomainsArgsForCall)
}

func (fake *FakeDomainDB) GetAllDomainsArgsForCall(i int) lager.Logger {
	fake.getAllDomainsMutex.RLock()
	defer fake.getAllDomainsMutex.RUnlock()
	return fake.getAllDomainsArgsForCall[i].logger
}

func (fake *FakeDomainDB) GetAllDomainsReturns(result1 *models.Domains, result2 *models.Error) {
	fake.GetAllDomainsStub = nil
	fake.getAllDomainsReturns = struct {
		result1 *models.Domains
		result2 *models.Error
	}{result1, result2}
}

func (fake *FakeDomainDB) UpsertDomain(domain string, ttl int, lgger lager.Logger) *models.Error {
	fake.upsertDomainMutex.Lock()
	fake.upsertDomainArgsForCall = append(fake.upsertDomainArgsForCall, struct {
		domain string
		ttl    int
		lgger  lager.Logger
	}{domain, ttl, lgger})
	fake.upsertDomainMutex.Unlock()
	if fake.UpsertDomainStub != nil {
		return fake.UpsertDomainStub(domain, ttl, lgger)
	} else {
		return fake.upsertDomainReturns.result1
	}
}

func (fake *FakeDomainDB) UpsertDomainCallCount() int {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	return len(fake.upsertDomainArgsForCall)
}

func (fake *FakeDomainDB) UpsertDomainArgsForCall(i int) (string, int, lager.Logger) {
	fake.upsertDomainMutex.RLock()
	defer fake.upsertDomainMutex.RUnlock()
	return fake.upsertDomainArgsForCall[i].domain, fake.upsertDomainArgsForCall[i].ttl, fake.upsertDomainArgsForCall[i].lgger
}

func (fake *FakeDomainDB) UpsertDomainReturns(result1 *models.Error) {
	fake.UpsertDomainStub = nil
	fake.upsertDomainReturns = struct {
		result1 *models.Error
	}{result1}
}

var _ db.DomainDB = new(FakeDomainDB)
