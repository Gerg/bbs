// Code generated by protoc-gen-gogo.
// source: actual_lrp.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ActualLRPGroup struct {
	Instance   *ActualLRP `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Evacuating *ActualLRP `protobuf:"bytes,2,opt,name=evacuating" json:"evacuating,omitempty"`
}

func (m *ActualLRPGroup) Reset()         { *m = ActualLRPGroup{} }
func (m *ActualLRPGroup) String() string { return proto.CompactTextString(m) }
func (*ActualLRPGroup) ProtoMessage()    {}

func (m *ActualLRPGroup) GetInstance() *ActualLRP {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *ActualLRPGroup) GetEvacuating() *ActualLRP {
	if m != nil {
		return m.Evacuating
	}
	return nil
}

type PortMapping struct {
	ContainerPort *uint32 `protobuf:"varint,1,opt,name=container_port" json:"container_port,omitempty"`
	HostPort      *uint32 `protobuf:"varint,2,opt,name=host_port" json:"host_port,omitempty"`
}

func (m *PortMapping) Reset()         { *m = PortMapping{} }
func (m *PortMapping) String() string { return proto.CompactTextString(m) }
func (*PortMapping) ProtoMessage()    {}

func (m *PortMapping) GetContainerPort() uint32 {
	if m != nil && m.ContainerPort != nil {
		return *m.ContainerPort
	}
	return 0
}

func (m *PortMapping) GetHostPort() uint32 {
	if m != nil && m.HostPort != nil {
		return *m.HostPort
	}
	return 0
}

type ActualLRPKey struct {
	ProcessGuid *string `protobuf:"bytes,1,opt,name=process_guid" json:"process_guid,omitempty"`
	Index       *int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Domain      *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
}

func (m *ActualLRPKey) Reset()         { *m = ActualLRPKey{} }
func (m *ActualLRPKey) String() string { return proto.CompactTextString(m) }
func (*ActualLRPKey) ProtoMessage()    {}

func (m *ActualLRPKey) GetProcessGuid() string {
	if m != nil && m.ProcessGuid != nil {
		return *m.ProcessGuid
	}
	return ""
}

func (m *ActualLRPKey) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *ActualLRPKey) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

type ActualLRPInstanceKey struct {
	InstanceGuid *string `protobuf:"bytes,1,opt,name=instance_guid" json:"instance_guid,omitempty"`
	CellId       *string `protobuf:"bytes,2,opt,name=cell_id" json:"cell_id,omitempty"`
}

func (m *ActualLRPInstanceKey) Reset()         { *m = ActualLRPInstanceKey{} }
func (m *ActualLRPInstanceKey) String() string { return proto.CompactTextString(m) }
func (*ActualLRPInstanceKey) ProtoMessage()    {}

func (m *ActualLRPInstanceKey) GetInstanceGuid() string {
	if m != nil && m.InstanceGuid != nil {
		return *m.InstanceGuid
	}
	return ""
}

func (m *ActualLRPInstanceKey) GetCellId() string {
	if m != nil && m.CellId != nil {
		return *m.CellId
	}
	return ""
}

type ActualLRPNetInfo struct {
	Address *string        `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Ports   []*PortMapping `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
}

func (m *ActualLRPNetInfo) Reset()         { *m = ActualLRPNetInfo{} }
func (m *ActualLRPNetInfo) String() string { return proto.CompactTextString(m) }
func (*ActualLRPNetInfo) ProtoMessage()    {}

func (m *ActualLRPNetInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *ActualLRPNetInfo) GetPorts() []*PortMapping {
	if m != nil {
		return m.Ports
	}
	return nil
}

type ActualLRP struct {
	ActualLRPKey         `protobuf:"bytes,1,opt,name=actual_lrp_key,embedded=actual_lrp_key" json:""`
	ActualLRPInstanceKey `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,embedded=actual_lrp_instance_key" json:""`
	ActualLRPNetInfo     `protobuf:"bytes,3,opt,name=actual_lrp_net_info,embedded=actual_lrp_net_info" json:""`
	CrashCount           *int32           `protobuf:"varint,4,opt,name=crash_count" json:"crash_count,omitempty"`
	CrashReason          *string          `protobuf:"bytes,5,opt,name=crash_reason" json:"crash_reason,omitempty"`
	State                *string          `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	PlacementError       *string          `protobuf:"bytes,7,opt,name=placement_error" json:"placement_error,omitempty"`
	Since                *int64           `protobuf:"varint,8,opt,name=since" json:"since,omitempty"`
	ModificationTag      *ModificationTag `protobuf:"bytes,9,opt,name=modification_tag" json:"modification_tag,omitempty"`
}

func (m *ActualLRP) Reset()         { *m = ActualLRP{} }
func (m *ActualLRP) String() string { return proto.CompactTextString(m) }
func (*ActualLRP) ProtoMessage()    {}

func (m *ActualLRP) GetCrashCount() int32 {
	if m != nil && m.CrashCount != nil {
		return *m.CrashCount
	}
	return 0
}

func (m *ActualLRP) GetCrashReason() string {
	if m != nil && m.CrashReason != nil {
		return *m.CrashReason
	}
	return ""
}

func (m *ActualLRP) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *ActualLRP) GetPlacementError() string {
	if m != nil && m.PlacementError != nil {
		return *m.PlacementError
	}
	return ""
}

func (m *ActualLRP) GetSince() int64 {
	if m != nil && m.Since != nil {
		return *m.Since
	}
	return 0
}

func (m *ActualLRP) GetModificationTag() *ModificationTag {
	if m != nil {
		return m.ModificationTag
	}
	return nil
}

type ActualLRPGroups struct {
	ActualLrpGroups []*ActualLRPGroup `protobuf:"bytes,1,rep,name=actual_lrp_groups" json:"actual_lrp_groups,omitempty"`
}

func (m *ActualLRPGroups) Reset()         { *m = ActualLRPGroups{} }
func (m *ActualLRPGroups) String() string { return proto.CompactTextString(m) }
func (*ActualLRPGroups) ProtoMessage()    {}

func (m *ActualLRPGroups) GetActualLrpGroups() []*ActualLRPGroup {
	if m != nil {
		return m.ActualLrpGroups
	}
	return nil
}

func init() {
}
func (m *ActualLRPGroup) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &ActualLRP{}
			}
			if err := m.Instance.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evacuating", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evacuating == nil {
				m.Evacuating = &ActualLRP{}
			}
			if err := m.Evacuating.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *PortMapping) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContainerPort = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostPort = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ActualLRPKey) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ProcessGuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Domain = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ActualLRPInstanceKey) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.InstanceGuid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CellId = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ActualLRPNetInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &PortMapping{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ActualLRP) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPKey.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPInstanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPInstanceKey.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLRPNetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualLRPNetInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrashCount = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CrashReason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.State = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PlacementError = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Since = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModificationTag == nil {
				m.ModificationTag = &ModificationTag{}
			}
			if err := m.ModificationTag.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ActualLRPGroups) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLrpGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualLrpGroups = append(m.ActualLrpGroups, &ActualLRPGroup{})
			if err := m.ActualLrpGroups[len(m.ActualLrpGroups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipActualLrp(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func skipActualLrp(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActualLrp(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}
func (m *ActualLRPGroup) Size() (n int) {
	var l int
	_ = l
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Evacuating != nil {
		l = m.Evacuating.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *PortMapping) Size() (n int) {
	var l int
	_ = l
	if m.ContainerPort != nil {
		n += 1 + sovActualLrp(uint64(*m.ContainerPort))
	}
	if m.HostPort != nil {
		n += 1 + sovActualLrp(uint64(*m.HostPort))
	}
	return n
}

func (m *ActualLRPKey) Size() (n int) {
	var l int
	_ = l
	if m.ProcessGuid != nil {
		l = len(*m.ProcessGuid)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Index != nil {
		n += 1 + sovActualLrp(uint64(*m.Index))
	}
	if m.Domain != nil {
		l = len(*m.Domain)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *ActualLRPInstanceKey) Size() (n int) {
	var l int
	_ = l
	if m.InstanceGuid != nil {
		l = len(*m.InstanceGuid)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.CellId != nil {
		l = len(*m.CellId)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *ActualLRPNetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovActualLrp(uint64(l))
		}
	}
	return n
}

func (m *ActualLRP) Size() (n int) {
	var l int
	_ = l
	l = m.ActualLRPKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPInstanceKey.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	l = m.ActualLRPNetInfo.Size()
	n += 1 + l + sovActualLrp(uint64(l))
	if m.CrashCount != nil {
		n += 1 + sovActualLrp(uint64(*m.CrashCount))
	}
	if m.CrashReason != nil {
		l = len(*m.CrashReason)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.State != nil {
		l = len(*m.State)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.PlacementError != nil {
		l = len(*m.PlacementError)
		n += 1 + l + sovActualLrp(uint64(l))
	}
	if m.Since != nil {
		n += 1 + sovActualLrp(uint64(*m.Since))
	}
	if m.ModificationTag != nil {
		l = m.ModificationTag.Size()
		n += 1 + l + sovActualLrp(uint64(l))
	}
	return n
}

func (m *ActualLRPGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.ActualLrpGroups) > 0 {
		for _, e := range m.ActualLrpGroups {
			l = e.Size()
			n += 1 + l + sovActualLrp(uint64(l))
		}
	}
	return n
}

func sovActualLrp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActualLrp(x uint64) (n int) {
	return sovActualLrp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActualLRPGroup) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRPGroup) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Instance != nil {
		data[i] = 0xa
		i++
		i = encodeVarintActualLrp(data, i, uint64(m.Instance.Size()))
		n1, err := m.Instance.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Evacuating != nil {
		data[i] = 0x12
		i++
		i = encodeVarintActualLrp(data, i, uint64(m.Evacuating.Size()))
		n2, err := m.Evacuating.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PortMapping) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PortMapping) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerPort != nil {
		data[i] = 0x8
		i++
		i = encodeVarintActualLrp(data, i, uint64(*m.ContainerPort))
	}
	if m.HostPort != nil {
		data[i] = 0x10
		i++
		i = encodeVarintActualLrp(data, i, uint64(*m.HostPort))
	}
	return i, nil
}

func (m *ActualLRPKey) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRPKey) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProcessGuid != nil {
		data[i] = 0xa
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.ProcessGuid)))
		i += copy(data[i:], *m.ProcessGuid)
	}
	if m.Index != nil {
		data[i] = 0x10
		i++
		i = encodeVarintActualLrp(data, i, uint64(*m.Index))
	}
	if m.Domain != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.Domain)))
		i += copy(data[i:], *m.Domain)
	}
	return i, nil
}

func (m *ActualLRPInstanceKey) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRPInstanceKey) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstanceGuid != nil {
		data[i] = 0xa
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.InstanceGuid)))
		i += copy(data[i:], *m.InstanceGuid)
	}
	if m.CellId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.CellId)))
		i += copy(data[i:], *m.CellId)
	}
	return i, nil
}

func (m *ActualLRPNetInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRPNetInfo) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		data[i] = 0xa
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.Address)))
		i += copy(data[i:], *m.Address)
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			data[i] = 0x12
			i++
			i = encodeVarintActualLrp(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActualLRP) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRP) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintActualLrp(data, i, uint64(m.ActualLRPKey.Size()))
	n3, err := m.ActualLRPKey.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	data[i] = 0x12
	i++
	i = encodeVarintActualLrp(data, i, uint64(m.ActualLRPInstanceKey.Size()))
	n4, err := m.ActualLRPInstanceKey.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	data[i] = 0x1a
	i++
	i = encodeVarintActualLrp(data, i, uint64(m.ActualLRPNetInfo.Size()))
	n5, err := m.ActualLRPNetInfo.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.CrashCount != nil {
		data[i] = 0x20
		i++
		i = encodeVarintActualLrp(data, i, uint64(*m.CrashCount))
	}
	if m.CrashReason != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.CrashReason)))
		i += copy(data[i:], *m.CrashReason)
	}
	if m.State != nil {
		data[i] = 0x32
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.State)))
		i += copy(data[i:], *m.State)
	}
	if m.PlacementError != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintActualLrp(data, i, uint64(len(*m.PlacementError)))
		i += copy(data[i:], *m.PlacementError)
	}
	if m.Since != nil {
		data[i] = 0x40
		i++
		i = encodeVarintActualLrp(data, i, uint64(*m.Since))
	}
	if m.ModificationTag != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintActualLrp(data, i, uint64(m.ModificationTag.Size()))
		n6, err := m.ModificationTag.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ActualLRPGroups) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ActualLRPGroups) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActualLrpGroups) > 0 {
		for _, msg := range m.ActualLrpGroups {
			data[i] = 0xa
			i++
			i = encodeVarintActualLrp(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64ActualLrp(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ActualLrp(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintActualLrp(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *ActualLRPGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPGroup)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Instance.Equal(that1.Instance) {
		return false
	}
	if !this.Evacuating.Equal(that1.Evacuating) {
		return false
	}
	return true
}
func (this *PortMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPort != nil && that1.ContainerPort != nil {
		if *this.ContainerPort != *that1.ContainerPort {
			return false
		}
	} else if this.ContainerPort != nil {
		return false
	} else if that1.ContainerPort != nil {
		return false
	}
	if this.HostPort != nil && that1.HostPort != nil {
		if *this.HostPort != *that1.HostPort {
			return false
		}
	} else if this.HostPort != nil {
		return false
	} else if that1.HostPort != nil {
		return false
	}
	return true
}
func (this *ActualLRPKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPKey)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != nil && that1.ProcessGuid != nil {
		if *this.ProcessGuid != *that1.ProcessGuid {
			return false
		}
	} else if this.ProcessGuid != nil {
		return false
	} else if that1.ProcessGuid != nil {
		return false
	}
	if this.Index != nil && that1.Index != nil {
		if *this.Index != *that1.Index {
			return false
		}
	} else if this.Index != nil {
		return false
	} else if that1.Index != nil {
		return false
	}
	if this.Domain != nil && that1.Domain != nil {
		if *this.Domain != *that1.Domain {
			return false
		}
	} else if this.Domain != nil {
		return false
	} else if that1.Domain != nil {
		return false
	}
	return true
}
func (this *ActualLRPInstanceKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPInstanceKey)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstanceGuid != nil && that1.InstanceGuid != nil {
		if *this.InstanceGuid != *that1.InstanceGuid {
			return false
		}
	} else if this.InstanceGuid != nil {
		return false
	} else if that1.InstanceGuid != nil {
		return false
	}
	if this.CellId != nil && that1.CellId != nil {
		if *this.CellId != *that1.CellId {
			return false
		}
	} else if this.CellId != nil {
		return false
	} else if that1.CellId != nil {
		return false
	}
	return true
}
func (this *ActualLRPNetInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPNetInfo)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Address != nil && that1.Address != nil {
		if *this.Address != *that1.Address {
			return false
		}
	} else if this.Address != nil {
		return false
	} else if that1.Address != nil {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	return true
}
func (this *ActualLRP) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRP)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ActualLRPKey.Equal(&that1.ActualLRPKey) {
		return false
	}
	if !this.ActualLRPInstanceKey.Equal(&that1.ActualLRPInstanceKey) {
		return false
	}
	if !this.ActualLRPNetInfo.Equal(&that1.ActualLRPNetInfo) {
		return false
	}
	if this.CrashCount != nil && that1.CrashCount != nil {
		if *this.CrashCount != *that1.CrashCount {
			return false
		}
	} else if this.CrashCount != nil {
		return false
	} else if that1.CrashCount != nil {
		return false
	}
	if this.CrashReason != nil && that1.CrashReason != nil {
		if *this.CrashReason != *that1.CrashReason {
			return false
		}
	} else if this.CrashReason != nil {
		return false
	} else if that1.CrashReason != nil {
		return false
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if this.PlacementError != nil && that1.PlacementError != nil {
		if *this.PlacementError != *that1.PlacementError {
			return false
		}
	} else if this.PlacementError != nil {
		return false
	} else if that1.PlacementError != nil {
		return false
	}
	if this.Since != nil && that1.Since != nil {
		if *this.Since != *that1.Since {
			return false
		}
	} else if this.Since != nil {
		return false
	} else if that1.Since != nil {
		return false
	}
	if !this.ModificationTag.Equal(that1.ModificationTag) {
		return false
	}
	return true
}
func (this *ActualLRPGroups) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ActualLRPGroups)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ActualLrpGroups) != len(that1.ActualLrpGroups) {
		return false
	}
	for i := range this.ActualLrpGroups {
		if !this.ActualLrpGroups[i].Equal(that1.ActualLrpGroups[i]) {
			return false
		}
	}
	return true
}
